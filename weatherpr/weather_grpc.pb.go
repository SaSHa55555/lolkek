// protoc --go_out=weather --go-grpc_out=. weather.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: weather.proto

package weatherpr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OpenWeatherMap_GetWeather_FullMethodName = "/openweathermap.OpenWeatherMap/GetWeather"
)

// OpenWeatherMapClient is the client API for OpenWeatherMap service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenWeatherMapClient interface {
	GetWeather(ctx context.Context, in *GetWeatherRequest, opts ...grpc.CallOption) (*GetWeatherResponse, error)
}

type openWeatherMapClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenWeatherMapClient(cc grpc.ClientConnInterface) OpenWeatherMapClient {
	return &openWeatherMapClient{cc}
}

func (c *openWeatherMapClient) GetWeather(ctx context.Context, in *GetWeatherRequest, opts ...grpc.CallOption) (*GetWeatherResponse, error) {
	out := new(GetWeatherResponse)
	err := c.cc.Invoke(ctx, OpenWeatherMap_GetWeather_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenWeatherMapServer is the server API for OpenWeatherMap service.
// All implementations must embed UnimplementedOpenWeatherMapServer
// for forward compatibility
type OpenWeatherMapServer interface {
	GetWeather(context.Context, *GetWeatherRequest) (*GetWeatherResponse, error)
	mustEmbedUnimplementedOpenWeatherMapServer()
}

// UnimplementedOpenWeatherMapServer must be embedded to have forward compatible implementations.
type UnimplementedOpenWeatherMapServer struct {
}

func (UnimplementedOpenWeatherMapServer) GetWeather(context.Context, *GetWeatherRequest) (*GetWeatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeather not implemented")
}
func (UnimplementedOpenWeatherMapServer) mustEmbedUnimplementedOpenWeatherMapServer() {}

// UnsafeOpenWeatherMapServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenWeatherMapServer will
// result in compilation errors.
type UnsafeOpenWeatherMapServer interface {
	mustEmbedUnimplementedOpenWeatherMapServer()
}

func RegisterOpenWeatherMapServer(s grpc.ServiceRegistrar, srv OpenWeatherMapServer) {
	s.RegisterService(&OpenWeatherMap_ServiceDesc, srv)
}

func _OpenWeatherMap_GetWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenWeatherMapServer).GetWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenWeatherMap_GetWeather_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenWeatherMapServer).GetWeather(ctx, req.(*GetWeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenWeatherMap_ServiceDesc is the grpc.ServiceDesc for OpenWeatherMap service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenWeatherMap_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openweathermap.OpenWeatherMap",
	HandlerType: (*OpenWeatherMapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWeather",
			Handler:    _OpenWeatherMap_GetWeather_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weather.proto",
}
